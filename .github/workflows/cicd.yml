name: CI/CD
on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - master

jobs:

  Linter:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@master

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0.0
      
      - name: Install Rubocop
        run: |
          gem install rubocop
          gem install rubocop-rails
      
      - name: Check code
        run: rubocop

  Test:
    needs: Linter
    runs-on: ubuntu-20.04
    services:
      postgres:
        image: postgres:13.1
        ports: ['5432:5432']
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@master

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0.0

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache yarn
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-

      - name: Cache gems
        uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: ${{ runner.os }}-gem-
      
      - name: Install dependencies
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
          yarn install --frozen-lockfile

      - name: Prepare database and run migrations
        env:
          RAILS_ENV: test
        run: |
          mv config/database.sample.yml config/database.yml
          bundle exec rails db:test:prepare
          bundle exec rails db:migrate

      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/adotae_test
          REDIS_URL: redis://localhost:6379/0
          RAILS_ENV: test
          RAILS_MASTER_KEY : ${{ secrets.RAILS_MASTER_KEY }}
          PG_USER: postgres
        run: |
          bundle exec rspec

      - name: Upload coverage results as artifact
        uses: actions/upload-artifact@master
        if: always()
        with:
          name: coverage-report
          path: coverage

      - name: Upload coverage results to CodeClimate
        uses: paambaati/codeclimate-action@v2.7.5
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}

  Quality:
    needs: Test
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@master

      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.pullrequest.key=$GITHUB_SHA
            -Dsonar.pullrequest.branch=$GITHUB_HEAD_REF
            -Dsonar.pullrequest.base=$GITHUB_BASE_REF

      - uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  Deploy:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    needs: Quality
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@master

      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.7.8
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: "adotae"
          heroku_email: "fvieiramacieldesouza58@gmail.com"
